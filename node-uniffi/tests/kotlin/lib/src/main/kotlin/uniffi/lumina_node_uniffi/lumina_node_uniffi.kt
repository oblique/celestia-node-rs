// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package uniffi.lumina_node_uniffi

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean
import kotlin.coroutines.resume
import kotlinx.coroutines.CancellableContinuation
import kotlinx.coroutines.DelicateCoroutinesApi
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.Job
import kotlinx.coroutines.launch
import kotlinx.coroutines.suspendCancellableCoroutine
import uniffi.lumina_node.FfiConverterTypeNetwork
import uniffi.lumina_node.FfiConverterTypePeerTrackerInfo
import uniffi.lumina_node.Network
import uniffi.lumina_node.PeerTrackerInfo
import uniffi.lumina_node.RustBuffer as RustBufferNetwork
import uniffi.lumina_node.RustBuffer as RustBufferPeerTrackerInfo

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

/**
 * @suppress
 */
@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    // Note: `capacity` and `len` are actually `ULong` values, but JVM only supports signed values.
    // When dealing with these fields, make sure to call `toULong()`.
    @JvmField var capacity: Long = 0
    @JvmField var len: Long = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

   internal fun setValue(other: RustBuffer) {
        capacity = other.capacity
        len = other.len
        data = other.data
    }

    companion object {
        internal fun alloc(size: ULong = 0UL) = uniffiRustCall() { status ->
            // Note: need to convert the size to a `Long` value to make this work with JVM.
            UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rustbuffer_alloc(size.toLong(), status)
        }.also {
            if(it.data == null) {
               throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
           }
        }

        internal fun create(capacity: ULong, len: ULong, data: Pointer?): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity.toLong()
            buf.len = len.toLong()
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) = uniffiRustCall() { status ->
            UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 *
 * @suppress
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setLong(0, value.capacity)
        pointer.setLong(8, value.len)
        pointer.setPointer(16, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getLong(0))
        value.writeField("len", pointer.getLong(8))
        value.writeField("data", pointer.getLong(16))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
internal open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
/**
 * The FfiConverter interface handles converter types to and from the FFI
 *
 * All implementing objects should be public to support external types.  When a
 * type is external we need to import it's FfiConverter.
 *
 * @suppress
 */
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): ULong

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position().toLong())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

/**
 * FfiConverter that uses `RustBuffer` as the FfiType
 *
 * @suppress
 */
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.

internal const val UNIFFI_CALL_SUCCESS = 0.toByte()
internal const val UNIFFI_CALL_ERROR = 1.toByte()
internal const val UNIFFI_CALL_UNEXPECTED_ERROR = 2.toByte()

@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: UniffiRustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == UNIFFI_CALL_SUCCESS
    }

    fun isError(): Boolean {
        return code == UNIFFI_CALL_ERROR
    }

    fun isPanic(): Boolean {
        return code == UNIFFI_CALL_UNEXPECTED_ERROR
    }

    companion object {
        fun create(code: Byte, errorBuf: RustBuffer.ByValue): UniffiRustCallStatus.ByValue {
            val callStatus = UniffiRustCallStatus.ByValue()
            callStatus.code = code
            callStatus.error_buf = errorBuf
            return callStatus
        }
    }
}

class InternalException(message: String) : kotlin.Exception(message)

/**
 * Each top-level error class has a companion object that can lift the error from the call status's rust buffer
 *
 * @suppress
 */
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: kotlin.Exception> uniffiRustCallWithError(errorHandler: UniffiRustCallStatusErrorHandler<E>, callback: (UniffiRustCallStatus) -> U): U {
    var status = UniffiRustCallStatus()
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun<E: kotlin.Exception> uniffiCheckCallStatus(errorHandler: UniffiRustCallStatusErrorHandler<E>, status: UniffiRustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

/**
 * UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
 *
 * @suppress
 */
object UniffiNullRustCallStatusErrorHandler: UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U {
    return uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback)
}

internal inline fun<T> uniffiTraitInterfaceCall(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
        callStatus.error_buf = FfiConverterString.lower(e.toString())
    }
}

internal inline fun<T, reified E: Throwable> uniffiTraitInterfaceCallWithError(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
    lowerError: (E) -> RustBuffer.ByValue
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        if (e is E) {
            callStatus.code = UNIFFI_CALL_ERROR
            callStatus.error_buf = lowerError(e)
        } else {
            callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
            callStatus.error_buf = FfiConverterString.lower(e.toString())
        }
    }
}
// Map handles to objects
//
// This is used pass an opaque 64-bit handle representing a foreign object to the Rust code.
internal class UniffiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<Long, T>()
    private val counter = java.util.concurrent.atomic.AtomicLong(0)

    val size: Int
        get() = map.size

    // Insert a new object into the handle map and get a handle for it
    fun insert(obj: T): Long {
        val handle = counter.getAndAdd(1)
        map.put(handle, obj)
        return handle
    }

    // Get an object from the handle map
    fun get(handle: Long): T {
        return map.get(handle) ?: throw InternalException("UniffiHandleMap.get: Invalid handle")
    }

    // Remove an entry from the handlemap and get the Kotlin object back
    fun remove(handle: Long): T {
        return map.remove(handle) ?: throw InternalException("UniffiHandleMap: Invalid handle")
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "lumina_node_uniffi"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// Define FFI callback types
internal interface UniffiRustFutureContinuationCallback : com.sun.jna.Callback {
    fun callback(`data`: Long,`pollResult`: Byte,)
}
internal interface UniffiForeignFutureFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
internal interface UniffiCallbackInterfaceFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
@Structure.FieldOrder("handle", "free")
internal open class UniffiForeignFuture(
    @JvmField internal var `handle`: Long = 0.toLong(),
    @JvmField internal var `free`: UniffiForeignFutureFree? = null,
) : Structure() {
    class UniffiByValue(
        `handle`: Long = 0.toLong(),
        `free`: UniffiForeignFutureFree? = null,
    ): UniffiForeignFuture(`handle`,`free`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFuture) {
        `handle` = other.`handle`
        `free` = other.`free`
    }

}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF32(
    @JvmField internal var `returnValue`: Float = 0.0f,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Float = 0.0f,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF64(
    @JvmField internal var `returnValue`: Double = 0.0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Double = 0.0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructPointer(
    @JvmField internal var `returnValue`: Pointer = Pointer.NULL,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Pointer = Pointer.NULL,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructPointer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructPointer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompletePointer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructPointer.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructRustBuffer(
    @JvmField internal var `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructRustBuffer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructRustBuffer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteRustBuffer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructRustBuffer.UniffiByValue,)
}
@Structure.FieldOrder("callStatus")
internal open class UniffiForeignFutureStructVoid(
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructVoid(`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructVoid) {
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteVoid : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructVoid.UniffiByValue,)
}












































































































// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface UniffiLib : Library {
    companion object {
        internal val INSTANCE: UniffiLib by lazy {
            loadIndirect<UniffiLib>(componentName = "lumina_node_uniffi")
            .also { lib: UniffiLib ->
                uniffiCheckContractApiVersion(lib)
                uniffiCheckApiChecksums(lib)
                }
        }
        
        // The Cleaner for the whole library
        internal val CLEANER: UniffiCleaner by lazy {
            UniffiCleaner.create()
        }
    }

    fun uniffi_lumina_node_uniffi_fn_clone_luminanode(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lumina_node_uniffi_fn_free_luminanode(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_lumina_node_uniffi_fn_constructor_luminanode_new(`config`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lumina_node_uniffi_fn_method_luminanode_connected_peers(`ptr`: Pointer,
    ): Long
    fun uniffi_lumina_node_uniffi_fn_method_luminanode_get_header_by_hash(`ptr`: Pointer,`hash`: RustBuffer.ByValue,
    ): Long
    fun uniffi_lumina_node_uniffi_fn_method_luminanode_get_header_by_height(`ptr`: Pointer,`height`: Long,
    ): Long
    fun uniffi_lumina_node_uniffi_fn_method_luminanode_get_headers(`ptr`: Pointer,`startHeight`: RustBuffer.ByValue,`endHeight`: RustBuffer.ByValue,
    ): Long
    fun uniffi_lumina_node_uniffi_fn_method_luminanode_get_local_head_header(`ptr`: Pointer,
    ): Long
    fun uniffi_lumina_node_uniffi_fn_method_luminanode_get_network_head_header(`ptr`: Pointer,
    ): Long
    fun uniffi_lumina_node_uniffi_fn_method_luminanode_get_sampling_metadata(`ptr`: Pointer,`height`: Long,
    ): Long
    fun uniffi_lumina_node_uniffi_fn_method_luminanode_is_running(`ptr`: Pointer,
    ): Long
    fun uniffi_lumina_node_uniffi_fn_method_luminanode_listeners(`ptr`: Pointer,
    ): Long
    fun uniffi_lumina_node_uniffi_fn_method_luminanode_local_peer_id(`ptr`: Pointer,
    ): Long
    fun uniffi_lumina_node_uniffi_fn_method_luminanode_network_info(`ptr`: Pointer,
    ): Long
    fun uniffi_lumina_node_uniffi_fn_method_luminanode_next_event(`ptr`: Pointer,
    ): Long
    fun uniffi_lumina_node_uniffi_fn_method_luminanode_peer_tracker_info(`ptr`: Pointer,
    ): Long
    fun uniffi_lumina_node_uniffi_fn_method_luminanode_request_head_header(`ptr`: Pointer,
    ): Long
    fun uniffi_lumina_node_uniffi_fn_method_luminanode_request_header_by_hash(`ptr`: Pointer,`hash`: RustBuffer.ByValue,
    ): Long
    fun uniffi_lumina_node_uniffi_fn_method_luminanode_request_header_by_height(`ptr`: Pointer,`height`: Long,
    ): Long
    fun uniffi_lumina_node_uniffi_fn_method_luminanode_request_verified_headers(`ptr`: Pointer,`from`: RustBuffer.ByValue,`amount`: Long,
    ): Long
    fun uniffi_lumina_node_uniffi_fn_method_luminanode_set_peer_trust(`ptr`: Pointer,`peerId`: RustBuffer.ByValue,`isTrusted`: Byte,
    ): Long
    fun uniffi_lumina_node_uniffi_fn_method_luminanode_start(`ptr`: Pointer,
    ): Long
    fun uniffi_lumina_node_uniffi_fn_method_luminanode_stop(`ptr`: Pointer,
    ): Long
    fun uniffi_lumina_node_uniffi_fn_method_luminanode_syncer_info(`ptr`: Pointer,
    ): Long
    fun uniffi_lumina_node_uniffi_fn_method_luminanode_wait_connected(`ptr`: Pointer,
    ): Long
    fun uniffi_lumina_node_uniffi_fn_method_luminanode_wait_connected_trusted(`ptr`: Pointer,
    ): Long
    fun ffi_lumina_node_uniffi_rustbuffer_alloc(`size`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_lumina_node_uniffi_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_lumina_node_uniffi_rustbuffer_free(`buf`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun ffi_lumina_node_uniffi_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_lumina_node_uniffi_rust_future_poll_u8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_cancel_u8(`handle`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_free_u8(`handle`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_complete_u8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun ffi_lumina_node_uniffi_rust_future_poll_i8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_cancel_i8(`handle`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_free_i8(`handle`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_complete_i8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun ffi_lumina_node_uniffi_rust_future_poll_u16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_cancel_u16(`handle`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_free_u16(`handle`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_complete_u16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Short
    fun ffi_lumina_node_uniffi_rust_future_poll_i16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_cancel_i16(`handle`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_free_i16(`handle`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_complete_i16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Short
    fun ffi_lumina_node_uniffi_rust_future_poll_u32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_cancel_u32(`handle`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_free_u32(`handle`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_complete_u32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun ffi_lumina_node_uniffi_rust_future_poll_i32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_cancel_i32(`handle`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_free_i32(`handle`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_complete_i32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun ffi_lumina_node_uniffi_rust_future_poll_u64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_cancel_u64(`handle`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_free_u64(`handle`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_complete_u64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    fun ffi_lumina_node_uniffi_rust_future_poll_i64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_cancel_i64(`handle`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_free_i64(`handle`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_complete_i64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    fun ffi_lumina_node_uniffi_rust_future_poll_f32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_cancel_f32(`handle`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_free_f32(`handle`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_complete_f32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Float
    fun ffi_lumina_node_uniffi_rust_future_poll_f64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_cancel_f64(`handle`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_free_f64(`handle`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_complete_f64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Double
    fun ffi_lumina_node_uniffi_rust_future_poll_pointer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_cancel_pointer(`handle`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_free_pointer(`handle`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_complete_pointer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun ffi_lumina_node_uniffi_rust_future_poll_rust_buffer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_cancel_rust_buffer(`handle`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_free_rust_buffer(`handle`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_complete_rust_buffer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_lumina_node_uniffi_rust_future_poll_void(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_cancel_void(`handle`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_free_void(`handle`: Long,
    ): Unit
    fun ffi_lumina_node_uniffi_rust_future_complete_void(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_lumina_node_uniffi_checksum_method_luminanode_connected_peers(
    ): Short
    fun uniffi_lumina_node_uniffi_checksum_method_luminanode_get_header_by_hash(
    ): Short
    fun uniffi_lumina_node_uniffi_checksum_method_luminanode_get_header_by_height(
    ): Short
    fun uniffi_lumina_node_uniffi_checksum_method_luminanode_get_headers(
    ): Short
    fun uniffi_lumina_node_uniffi_checksum_method_luminanode_get_local_head_header(
    ): Short
    fun uniffi_lumina_node_uniffi_checksum_method_luminanode_get_network_head_header(
    ): Short
    fun uniffi_lumina_node_uniffi_checksum_method_luminanode_get_sampling_metadata(
    ): Short
    fun uniffi_lumina_node_uniffi_checksum_method_luminanode_is_running(
    ): Short
    fun uniffi_lumina_node_uniffi_checksum_method_luminanode_listeners(
    ): Short
    fun uniffi_lumina_node_uniffi_checksum_method_luminanode_local_peer_id(
    ): Short
    fun uniffi_lumina_node_uniffi_checksum_method_luminanode_network_info(
    ): Short
    fun uniffi_lumina_node_uniffi_checksum_method_luminanode_next_event(
    ): Short
    fun uniffi_lumina_node_uniffi_checksum_method_luminanode_peer_tracker_info(
    ): Short
    fun uniffi_lumina_node_uniffi_checksum_method_luminanode_request_head_header(
    ): Short
    fun uniffi_lumina_node_uniffi_checksum_method_luminanode_request_header_by_hash(
    ): Short
    fun uniffi_lumina_node_uniffi_checksum_method_luminanode_request_header_by_height(
    ): Short
    fun uniffi_lumina_node_uniffi_checksum_method_luminanode_request_verified_headers(
    ): Short
    fun uniffi_lumina_node_uniffi_checksum_method_luminanode_set_peer_trust(
    ): Short
    fun uniffi_lumina_node_uniffi_checksum_method_luminanode_start(
    ): Short
    fun uniffi_lumina_node_uniffi_checksum_method_luminanode_stop(
    ): Short
    fun uniffi_lumina_node_uniffi_checksum_method_luminanode_syncer_info(
    ): Short
    fun uniffi_lumina_node_uniffi_checksum_method_luminanode_wait_connected(
    ): Short
    fun uniffi_lumina_node_uniffi_checksum_method_luminanode_wait_connected_trusted(
    ): Short
    fun uniffi_lumina_node_uniffi_checksum_constructor_luminanode_new(
    ): Short
    fun ffi_lumina_node_uniffi_uniffi_contract_version(
    ): Int
    
}

private fun uniffiCheckContractApiVersion(lib: UniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_lumina_node_uniffi_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: UniffiLib) {
    if (lib.uniffi_lumina_node_uniffi_checksum_method_luminanode_connected_peers() != 17234.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lumina_node_uniffi_checksum_method_luminanode_get_header_by_hash() != 61469.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lumina_node_uniffi_checksum_method_luminanode_get_header_by_height() != 12003.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lumina_node_uniffi_checksum_method_luminanode_get_headers() != 26729.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lumina_node_uniffi_checksum_method_luminanode_get_local_head_header() != 34761.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lumina_node_uniffi_checksum_method_luminanode_get_network_head_header() != 15670.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lumina_node_uniffi_checksum_method_luminanode_get_sampling_metadata() != 54906.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lumina_node_uniffi_checksum_method_luminanode_is_running() != 50837.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lumina_node_uniffi_checksum_method_luminanode_listeners() != 33420.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lumina_node_uniffi_checksum_method_luminanode_local_peer_id() != 23590.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lumina_node_uniffi_checksum_method_luminanode_network_info() != 11790.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lumina_node_uniffi_checksum_method_luminanode_next_event() != 58499.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lumina_node_uniffi_checksum_method_luminanode_peer_tracker_info() != 26433.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lumina_node_uniffi_checksum_method_luminanode_request_head_header() != 42787.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lumina_node_uniffi_checksum_method_luminanode_request_header_by_hash() != 34712.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lumina_node_uniffi_checksum_method_luminanode_request_header_by_height() != 42079.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lumina_node_uniffi_checksum_method_luminanode_request_verified_headers() != 37952.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lumina_node_uniffi_checksum_method_luminanode_set_peer_trust() != 14847.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lumina_node_uniffi_checksum_method_luminanode_start() != 8011.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lumina_node_uniffi_checksum_method_luminanode_stop() != 33053.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lumina_node_uniffi_checksum_method_luminanode_syncer_info() != 20757.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lumina_node_uniffi_checksum_method_luminanode_wait_connected() != 24979.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lumina_node_uniffi_checksum_method_luminanode_wait_connected_trusted() != 57033.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lumina_node_uniffi_checksum_constructor_luminanode_new() != 3370.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Async support
// Async return type handlers

internal const val UNIFFI_RUST_FUTURE_POLL_READY = 0.toByte()
internal const val UNIFFI_RUST_FUTURE_POLL_MAYBE_READY = 1.toByte()

internal val uniffiContinuationHandleMap = UniffiHandleMap<CancellableContinuation<Byte>>()

// FFI type for Rust future continuations
internal object uniffiRustFutureContinuationCallbackImpl: UniffiRustFutureContinuationCallback {
    override fun callback(data: Long, pollResult: Byte) {
        uniffiContinuationHandleMap.remove(data).resume(pollResult)
    }
}

internal suspend fun<T, F, E: kotlin.Exception> uniffiRustCallAsync(
    rustFuture: Long,
    pollFunc: (Long, UniffiRustFutureContinuationCallback, Long) -> Unit,
    completeFunc: (Long, UniffiRustCallStatus) -> F,
    freeFunc: (Long) -> Unit,
    liftFunc: (F) -> T,
    errorHandler: UniffiRustCallStatusErrorHandler<E>
): T {
    try {
        do {
            val pollResult = suspendCancellableCoroutine<Byte> { continuation ->
                pollFunc(
                    rustFuture,
                    uniffiRustFutureContinuationCallbackImpl,
                    uniffiContinuationHandleMap.insert(continuation)
                )
            }
        } while (pollResult != UNIFFI_RUST_FUTURE_POLL_READY);

        return liftFunc(
            uniffiRustCallWithError(errorHandler, { status -> completeFunc(rustFuture, status) })
        )
    } finally {
        freeFunc(rustFuture)
    }
}

// Public interface members begin here.


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

/**
 * @suppress
 */
inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

/** 
 * Used to instantiate an interface without an actual pointer, for fakes in tests, mostly.
 *
 * @suppress
 * */
object NoPointer

/**
 * @suppress
 */
public object FfiConverterUShort: FfiConverter<UShort, Short> {
    override fun lift(value: Short): UShort {
        return value.toUShort()
    }

    override fun read(buf: ByteBuffer): UShort {
        return lift(buf.getShort())
    }

    override fun lower(value: UShort): Short {
        return value.toShort()
    }

    override fun allocationSize(value: UShort) = 2UL

    override fun write(value: UShort, buf: ByteBuffer) {
        buf.putShort(value.toShort())
    }
}

/**
 * @suppress
 */
public object FfiConverterUInt: FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4UL

    override fun write(value: UInt, buf: ByteBuffer) {
        buf.putInt(value.toInt())
    }
}

/**
 * @suppress
 */
public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8UL

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

/**
 * @suppress
 */
public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1UL

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

/**
 * @suppress
 */
public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len.toInt())
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit().toULong())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): ULong {
        val sizeForLength = 4UL
        val sizeForString = value.length.toULong() * 3UL
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}

/**
 * @suppress
 */
public object FfiConverterByteArray: FfiConverterRustBuffer<ByteArray> {
    override fun read(buf: ByteBuffer): ByteArray {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr
    }
    override fun allocationSize(value: ByteArray): ULong {
        return 4UL + value.size.toULong()
    }
    override fun write(value: ByteArray, buf: ByteBuffer) {
        buf.putInt(value.size)
        buf.put(value)
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


/**
 * The cleaner interface for Object finalization code to run.
 * This is the entry point to any implementation that we're using.
 *
 * The cleaner registers objects and returns cleanables, so now we are
 * defining a `UniffiCleaner` with a `UniffiClenaer.Cleanable` to abstract the
 * different implmentations available at compile time.
 *
 * @suppress
 */
interface UniffiCleaner {
    interface Cleanable {
        fun clean()
    }

    fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable

    companion object
}

// The fallback Jna cleaner, which is available for both Android, and the JVM.
private class UniffiJnaCleaner : UniffiCleaner {
    private val cleaner = com.sun.jna.internal.Cleaner.getCleaner()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        UniffiJnaCleanable(cleaner.register(value, cleanUpTask))
}

private class UniffiJnaCleanable(
    private val cleanable: com.sun.jna.internal.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

// We decide at uniffi binding generation time whether we were
// using Android or not.
// There are further runtime checks to chose the correct implementation
// of the cleaner.
private fun UniffiCleaner.Companion.create(): UniffiCleaner =
    try {
        // For safety's sake: if the library hasn't been run in android_cleaner = true
        // mode, but is being run on Android, then we still need to think about
        // Android API versions.
        // So we check if java.lang.ref.Cleaner is there, and use that…
        java.lang.Class.forName("java.lang.ref.Cleaner")
        JavaLangRefCleaner()
    } catch (e: ClassNotFoundException) {
        // … otherwise, fallback to the JNA cleaner.
        UniffiJnaCleaner()
    }

private class JavaLangRefCleaner : UniffiCleaner {
    val cleaner = java.lang.ref.Cleaner.create()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        JavaLangRefCleanable(cleaner.register(value, cleanUpTask))
}

private class JavaLangRefCleanable(
    val cleanable: java.lang.ref.Cleaner.Cleanable
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}
/**
 * The main Lumina node that manages the connection to the Celestia network.
 */
public interface LuminaNodeInterface {
    
    /**
     * Gets list of currently connected peer IDs.
     */
    suspend fun `connectedPeers`(): List<PeerId>
    
    /**
     * Get a synced header for the block with a given hash.
     */
    suspend fun `getHeaderByHash`(`hash`: kotlin.String): kotlin.String
    
    /**
     * Get a synced header for the block with a given height.
     */
    suspend fun `getHeaderByHeight`(`height`: kotlin.ULong): kotlin.String
    
    /**
     * Gets headers from the given heights range.
     *
     * If start of the range is undefined (None), the first returned header will be of height 1.
     * If end of the range is undefined (None), the last returned header will be the last header in the
     * store.
     *
     * Returns array of serialized ExtendedHeader strings.
     */
    suspend fun `getHeaders`(`startHeight`: kotlin.ULong?, `endHeight`: kotlin.ULong?): List<kotlin.String>
    
    /**
     * Gets the latest locally synced header.
     */
    suspend fun `getLocalHeadHeader`(): kotlin.String
    
    /**
     * Gets the latest header announced in the network.
     */
    suspend fun `getNetworkHeadHeader`(): kotlin.String
    
    /**
     * Gets data sampling metadata for a height.
     *
     * Returns serialized SamplingMetadata string if metadata exists for the height.
     */
    suspend fun `getSamplingMetadata`(`height`: kotlin.ULong): kotlin.String?
    
    /**
     * Checks if the node is currently running.
     */
    suspend fun `isRunning`(): kotlin.Boolean
    
    /**
     * Gets list of addresses the node is listening to.
     */
    suspend fun `listeners`(): List<kotlin.String>
    
    /**
     * Gets the local peer ID as a string.
     */
    suspend fun `localPeerId`(): kotlin.String
    
    /**
     * Gets current network information.
     */
    suspend fun `networkInfo`(): NetworkInfo
    
    /**
     * Returns the next event from the node's event channel.
     */
    suspend fun `nextEvent`(): NodeEvent
    
    /**
     * Gets information about connected peers.
     */
    suspend fun `peerTrackerInfo`(): PeerTrackerInfo
    
    /**
     * Request the head header from the network.
     *
     * Returns a serialized ExtendedHeader string.
     */
    suspend fun `requestHeadHeader`(): kotlin.String
    
    /**
     * Request a header for the block with a given hash from the network.
     */
    suspend fun `requestHeaderByHash`(`hash`: kotlin.String): kotlin.String
    
    /**
     * Requests a header by its height.
     */
    suspend fun `requestHeaderByHeight`(`height`: kotlin.ULong): kotlin.String
    
    /**
     * Request headers in range (from, from + amount] from the network.
     *
     * The headers will be verified with the from header.
     * Returns array of serialized ExtendedHeader strings.
     */
    suspend fun `requestVerifiedHeaders`(`from`: kotlin.String, `amount`: kotlin.ULong): List<kotlin.String>
    
    /**
     * Sets whether a peer with give ID is trusted.
     */
    suspend fun `setPeerTrust`(`peerId`: PeerId, `isTrusted`: kotlin.Boolean)
    
    /**
     * Starts the node and connects to the network.
     */
    suspend fun `start`(): kotlin.Boolean
    
    /**
     * Stops the running node and closes all network connections.
     */
    suspend fun `stop`()
    
    /**
     * Gets current syncing information.
     */
    suspend fun `syncerInfo`(): SyncingInfo
    
    /**
     * Waits until the node is connected to at least one peer.
     */
    suspend fun `waitConnected`()
    
    /**
     * Waits until the node is connected to at least one trusted peer.
     */
    suspend fun `waitConnectedTrusted`()
    
    companion object
}

/**
 * The main Lumina node that manages the connection to the Celestia network.
 */
open class LuminaNode: Disposable, AutoCloseable, LuminaNodeInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }
    /**
     * Sets a new connection to the Lumina node for the specified network.
     */
    constructor(`config`: NodeConfig) :
        this(
    uniffiRustCallWithError(LuminaException) { _status ->
    UniffiLib.INSTANCE.uniffi_lumina_node_uniffi_fn_constructor_luminanode_new(
        FfiConverterTypeNodeConfig.lower(`config`),_status)
}
    )

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_lumina_node_uniffi_fn_free_luminanode(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_lumina_node_uniffi_fn_clone_luminanode(pointer!!, status)
        }
    }

    
    /**
     * Gets list of currently connected peer IDs.
     */
    @Throws(LuminaException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `connectedPeers`() : List<PeerId> {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_lumina_node_uniffi_fn_method_luminanode_connected_peers(
                thisPtr,
                
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterSequenceTypePeerId.lift(it) },
        // Error FFI converter
        LuminaException.ErrorHandler,
    )
    }

    
    /**
     * Get a synced header for the block with a given hash.
     */
    @Throws(LuminaException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `getHeaderByHash`(`hash`: kotlin.String) : kotlin.String {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_lumina_node_uniffi_fn_method_luminanode_get_header_by_hash(
                thisPtr,
                FfiConverterString.lower(`hash`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        LuminaException.ErrorHandler,
    )
    }

    
    /**
     * Get a synced header for the block with a given height.
     */
    @Throws(LuminaException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `getHeaderByHeight`(`height`: kotlin.ULong) : kotlin.String {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_lumina_node_uniffi_fn_method_luminanode_get_header_by_height(
                thisPtr,
                FfiConverterULong.lower(`height`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        LuminaException.ErrorHandler,
    )
    }

    
    /**
     * Gets headers from the given heights range.
     *
     * If start of the range is undefined (None), the first returned header will be of height 1.
     * If end of the range is undefined (None), the last returned header will be the last header in the
     * store.
     *
     * Returns array of serialized ExtendedHeader strings.
     */
    @Throws(LuminaException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `getHeaders`(`startHeight`: kotlin.ULong?, `endHeight`: kotlin.ULong?) : List<kotlin.String> {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_lumina_node_uniffi_fn_method_luminanode_get_headers(
                thisPtr,
                FfiConverterOptionalULong.lower(`startHeight`),FfiConverterOptionalULong.lower(`endHeight`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterSequenceString.lift(it) },
        // Error FFI converter
        LuminaException.ErrorHandler,
    )
    }

    
    /**
     * Gets the latest locally synced header.
     */
    @Throws(LuminaException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `getLocalHeadHeader`() : kotlin.String {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_lumina_node_uniffi_fn_method_luminanode_get_local_head_header(
                thisPtr,
                
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        LuminaException.ErrorHandler,
    )
    }

    
    /**
     * Gets the latest header announced in the network.
     */
    @Throws(LuminaException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `getNetworkHeadHeader`() : kotlin.String {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_lumina_node_uniffi_fn_method_luminanode_get_network_head_header(
                thisPtr,
                
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        LuminaException.ErrorHandler,
    )
    }

    
    /**
     * Gets data sampling metadata for a height.
     *
     * Returns serialized SamplingMetadata string if metadata exists for the height.
     */
    @Throws(LuminaException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `getSamplingMetadata`(`height`: kotlin.ULong) : kotlin.String? {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_lumina_node_uniffi_fn_method_luminanode_get_sampling_metadata(
                thisPtr,
                FfiConverterULong.lower(`height`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterOptionalString.lift(it) },
        // Error FFI converter
        LuminaException.ErrorHandler,
    )
    }

    
    /**
     * Checks if the node is currently running.
     */
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `isRunning`() : kotlin.Boolean {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_lumina_node_uniffi_fn_method_luminanode_is_running(
                thisPtr,
                
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_poll_i8(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_complete_i8(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_free_i8(future) },
        // lift function
        { FfiConverterBoolean.lift(it) },
        // Error FFI converter
        UniffiNullRustCallStatusErrorHandler,
    )
    }

    
    /**
     * Gets list of addresses the node is listening to.
     */
    @Throws(LuminaException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `listeners`() : List<kotlin.String> {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_lumina_node_uniffi_fn_method_luminanode_listeners(
                thisPtr,
                
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterSequenceString.lift(it) },
        // Error FFI converter
        LuminaException.ErrorHandler,
    )
    }

    
    /**
     * Gets the local peer ID as a string.
     */
    @Throws(LuminaException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `localPeerId`() : kotlin.String {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_lumina_node_uniffi_fn_method_luminanode_local_peer_id(
                thisPtr,
                
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        LuminaException.ErrorHandler,
    )
    }

    
    /**
     * Gets current network information.
     */
    @Throws(LuminaException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `networkInfo`() : NetworkInfo {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_lumina_node_uniffi_fn_method_luminanode_network_info(
                thisPtr,
                
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeNetworkInfo.lift(it) },
        // Error FFI converter
        LuminaException.ErrorHandler,
    )
    }

    
    /**
     * Returns the next event from the node's event channel.
     */
    @Throws(LuminaException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `nextEvent`() : NodeEvent {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_lumina_node_uniffi_fn_method_luminanode_next_event(
                thisPtr,
                
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeNodeEvent.lift(it) },
        // Error FFI converter
        LuminaException.ErrorHandler,
    )
    }

    
    /**
     * Gets information about connected peers.
     */
    @Throws(LuminaException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `peerTrackerInfo`() : PeerTrackerInfo {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_lumina_node_uniffi_fn_method_luminanode_peer_tracker_info(
                thisPtr,
                
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_complete_rust_buffer(future, continuation).let { RustBufferPeerTrackerInfo.create(it.capacity.toULong(), it.len.toULong(), it.data) } },
        { future -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypePeerTrackerInfo.lift(it) },
        // Error FFI converter
        LuminaException.ErrorHandler,
    )
    }

    
    /**
     * Request the head header from the network.
     *
     * Returns a serialized ExtendedHeader string.
     */
    @Throws(LuminaException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `requestHeadHeader`() : kotlin.String {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_lumina_node_uniffi_fn_method_luminanode_request_head_header(
                thisPtr,
                
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        LuminaException.ErrorHandler,
    )
    }

    
    /**
     * Request a header for the block with a given hash from the network.
     */
    @Throws(LuminaException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `requestHeaderByHash`(`hash`: kotlin.String) : kotlin.String {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_lumina_node_uniffi_fn_method_luminanode_request_header_by_hash(
                thisPtr,
                FfiConverterString.lower(`hash`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        LuminaException.ErrorHandler,
    )
    }

    
    /**
     * Requests a header by its height.
     */
    @Throws(LuminaException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `requestHeaderByHeight`(`height`: kotlin.ULong) : kotlin.String {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_lumina_node_uniffi_fn_method_luminanode_request_header_by_height(
                thisPtr,
                FfiConverterULong.lower(`height`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        LuminaException.ErrorHandler,
    )
    }

    
    /**
     * Request headers in range (from, from + amount] from the network.
     *
     * The headers will be verified with the from header.
     * Returns array of serialized ExtendedHeader strings.
     */
    @Throws(LuminaException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `requestVerifiedHeaders`(`from`: kotlin.String, `amount`: kotlin.ULong) : List<kotlin.String> {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_lumina_node_uniffi_fn_method_luminanode_request_verified_headers(
                thisPtr,
                FfiConverterString.lower(`from`),FfiConverterULong.lower(`amount`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterSequenceString.lift(it) },
        // Error FFI converter
        LuminaException.ErrorHandler,
    )
    }

    
    /**
     * Sets whether a peer with give ID is trusted.
     */
    @Throws(LuminaException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `setPeerTrust`(`peerId`: PeerId, `isTrusted`: kotlin.Boolean) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_lumina_node_uniffi_fn_method_luminanode_set_peer_trust(
                thisPtr,
                FfiConverterTypePeerId.lower(`peerId`),FfiConverterBoolean.lower(`isTrusted`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        LuminaException.ErrorHandler,
    )
    }

    
    /**
     * Starts the node and connects to the network.
     */
    @Throws(LuminaException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `start`() : kotlin.Boolean {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_lumina_node_uniffi_fn_method_luminanode_start(
                thisPtr,
                
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_poll_i8(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_complete_i8(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_free_i8(future) },
        // lift function
        { FfiConverterBoolean.lift(it) },
        // Error FFI converter
        LuminaException.ErrorHandler,
    )
    }

    
    /**
     * Stops the running node and closes all network connections.
     */
    @Throws(LuminaException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `stop`() {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_lumina_node_uniffi_fn_method_luminanode_stop(
                thisPtr,
                
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        LuminaException.ErrorHandler,
    )
    }

    
    /**
     * Gets current syncing information.
     */
    @Throws(LuminaException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `syncerInfo`() : SyncingInfo {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_lumina_node_uniffi_fn_method_luminanode_syncer_info(
                thisPtr,
                
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeSyncingInfo.lift(it) },
        // Error FFI converter
        LuminaException.ErrorHandler,
    )
    }

    
    /**
     * Waits until the node is connected to at least one peer.
     */
    @Throws(LuminaException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `waitConnected`() {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_lumina_node_uniffi_fn_method_luminanode_wait_connected(
                thisPtr,
                
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        LuminaException.ErrorHandler,
    )
    }

    
    /**
     * Waits until the node is connected to at least one trusted peer.
     */
    @Throws(LuminaException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `waitConnectedTrusted`() {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_lumina_node_uniffi_fn_method_luminanode_wait_connected_trusted(
                thisPtr,
                
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_lumina_node_uniffi_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        LuminaException.ErrorHandler,
    )
    }

    

    
    
    companion object
    
}

/**
 * @suppress
 */
public object FfiConverterTypeLuminaNode: FfiConverter<LuminaNode, Pointer> {

    override fun lower(value: LuminaNode): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): LuminaNode {
        return LuminaNode(value)
    }

    override fun read(buf: ByteBuffer): LuminaNode {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: LuminaNode) = 8UL

    override fun write(value: LuminaNode, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}



/**
 * A range of blocks.
 */
data class BlockRange (
    var `start`: kotlin.ULong, 
    var `end`: kotlin.ULong
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeBlockRange: FfiConverterRustBuffer<BlockRange> {
    override fun read(buf: ByteBuffer): BlockRange {
        return BlockRange(
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: BlockRange) = (
            FfiConverterULong.allocationSize(value.`start`) +
            FfiConverterULong.allocationSize(value.`end`)
    )

    override fun write(value: BlockRange, buf: ByteBuffer) {
            FfiConverterULong.write(value.`start`, buf)
            FfiConverterULong.write(value.`end`, buf)
    }
}



/**
 * Counters of ongoing network connections.
 */
data class ConnectionCounters (
    /**
     * The current number of connections.
     */
    var `numConnections`: kotlin.UInt, 
    /**
     * The current number of pending connections.
     */
    var `numPending`: kotlin.UInt, 
    /**
     * The current number of incoming connections.
     */
    var `numPendingIncoming`: kotlin.UInt, 
    /**
     * The current number of outgoing connections.
     */
    var `numPendingOutgoing`: kotlin.UInt, 
    /**
     * The current number of established connections.
     */
    var `numEstablished`: kotlin.UInt, 
    /**
     * The current number of established inbound connections.
     */
    var `numEstablishedIncoming`: kotlin.UInt, 
    /**
     * The current number of established outbound connections.
     */
    var `numEstablishedOutgoing`: kotlin.UInt
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeConnectionCounters: FfiConverterRustBuffer<ConnectionCounters> {
    override fun read(buf: ByteBuffer): ConnectionCounters {
        return ConnectionCounters(
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
        )
    }

    override fun allocationSize(value: ConnectionCounters) = (
            FfiConverterUInt.allocationSize(value.`numConnections`) +
            FfiConverterUInt.allocationSize(value.`numPending`) +
            FfiConverterUInt.allocationSize(value.`numPendingIncoming`) +
            FfiConverterUInt.allocationSize(value.`numPendingOutgoing`) +
            FfiConverterUInt.allocationSize(value.`numEstablished`) +
            FfiConverterUInt.allocationSize(value.`numEstablishedIncoming`) +
            FfiConverterUInt.allocationSize(value.`numEstablishedOutgoing`)
    )

    override fun write(value: ConnectionCounters, buf: ByteBuffer) {
            FfiConverterUInt.write(value.`numConnections`, buf)
            FfiConverterUInt.write(value.`numPending`, buf)
            FfiConverterUInt.write(value.`numPendingIncoming`, buf)
            FfiConverterUInt.write(value.`numPendingOutgoing`, buf)
            FfiConverterUInt.write(value.`numEstablished`, buf)
            FfiConverterUInt.write(value.`numEstablishedIncoming`, buf)
            FfiConverterUInt.write(value.`numEstablishedOutgoing`, buf)
    }
}



data class NetworkInfo (
    /**
     * The total number of connected peers.
     */
    var `numPeers`: kotlin.UInt, 
    /**
     * Counters of ongoing network connections.
     */
    var `connectionCounters`: ConnectionCounters
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeNetworkInfo: FfiConverterRustBuffer<NetworkInfo> {
    override fun read(buf: ByteBuffer): NetworkInfo {
        return NetworkInfo(
            FfiConverterUInt.read(buf),
            FfiConverterTypeConnectionCounters.read(buf),
        )
    }

    override fun allocationSize(value: NetworkInfo) = (
            FfiConverterUInt.allocationSize(value.`numPeers`) +
            FfiConverterTypeConnectionCounters.allocationSize(value.`connectionCounters`)
    )

    override fun write(value: NetworkInfo, buf: ByteBuffer) {
            FfiConverterUInt.write(value.`numPeers`, buf)
            FfiConverterTypeConnectionCounters.write(value.`connectionCounters`, buf)
    }
}



/**
 * Configuration options for the Lumina node
 */
data class NodeConfig (
    /**
     * Base path for storing node data as a string. If this is not set then in-memory stores are used.
     */
    var `basePath`: kotlin.String?, 
    /**
     * Network to connect to
     */
    var `network`: Network, 
    /**
     * Custom list of bootstrap peers to connect to.
     * If None, uses the canonical bootnodes for the network.
     */
    var `bootnodes`: List<kotlin.String>?, 
    /**
     * Custom syncing window in seconds. Default is 30 days if base path is set and 1 minute if not.
     */
    var `syncingWindowSecs`: kotlin.UInt?, 
    /**
     * Custom pruning delay after syncing window in seconds. Default is 1 hour if base path is set
     * and 1 minute if not.
     */
    var `pruningDelaySecs`: kotlin.UInt?, 
    /**
     * Maximum number of headers in batch while syncing. Default is 128.
     */
    var `batchSize`: kotlin.ULong?, 
    /**
     * Optional Set the keypair to be used as Node's identity. If None, generates a new Ed25519 keypair.
     */
    var `ed25519SecretKeyBytes`: kotlin.ByteArray?
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeNodeConfig: FfiConverterRustBuffer<NodeConfig> {
    override fun read(buf: ByteBuffer): NodeConfig {
        return NodeConfig(
            FfiConverterOptionalString.read(buf),
            FfiConverterTypeNetwork.read(buf),
            FfiConverterOptionalSequenceString.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalByteArray.read(buf),
        )
    }

    override fun allocationSize(value: NodeConfig) = (
            FfiConverterOptionalString.allocationSize(value.`basePath`) +
            FfiConverterTypeNetwork.allocationSize(value.`network`) +
            FfiConverterOptionalSequenceString.allocationSize(value.`bootnodes`) +
            FfiConverterOptionalUInt.allocationSize(value.`syncingWindowSecs`) +
            FfiConverterOptionalUInt.allocationSize(value.`pruningDelaySecs`) +
            FfiConverterOptionalULong.allocationSize(value.`batchSize`) +
            FfiConverterOptionalByteArray.allocationSize(value.`ed25519SecretKeyBytes`)
    )

    override fun write(value: NodeConfig, buf: ByteBuffer) {
            FfiConverterOptionalString.write(value.`basePath`, buf)
            FfiConverterTypeNetwork.write(value.`network`, buf)
            FfiConverterOptionalSequenceString.write(value.`bootnodes`, buf)
            FfiConverterOptionalUInt.write(value.`syncingWindowSecs`, buf)
            FfiConverterOptionalUInt.write(value.`pruningDelaySecs`, buf)
            FfiConverterOptionalULong.write(value.`batchSize`, buf)
            FfiConverterOptionalByteArray.write(value.`ed25519SecretKeyBytes`, buf)
    }
}



data class PeerId (
    /**
     * The peer ID stored as base58 string.
     */
    var `peerId`: kotlin.String
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypePeerId: FfiConverterRustBuffer<PeerId> {
    override fun read(buf: ByteBuffer): PeerId {
        return PeerId(
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: PeerId) = (
            FfiConverterString.allocationSize(value.`peerId`)
    )

    override fun write(value: PeerId, buf: ByteBuffer) {
            FfiConverterString.write(value.`peerId`, buf)
    }
}



data class ShareCoordinate (
    var `row`: kotlin.UShort, 
    var `column`: kotlin.UShort
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeShareCoordinate: FfiConverterRustBuffer<ShareCoordinate> {
    override fun read(buf: ByteBuffer): ShareCoordinate {
        return ShareCoordinate(
            FfiConverterUShort.read(buf),
            FfiConverterUShort.read(buf),
        )
    }

    override fun allocationSize(value: ShareCoordinate) = (
            FfiConverterUShort.allocationSize(value.`row`) +
            FfiConverterUShort.allocationSize(value.`column`)
    )

    override fun write(value: ShareCoordinate, buf: ByteBuffer) {
            FfiConverterUShort.write(value.`row`, buf)
            FfiConverterUShort.write(value.`column`, buf)
    }
}



/**
 * Status of the node syncing.
 */
data class SyncingInfo (
    /**
     * Ranges of headers that are already synchronised
     */
    var `storedHeaders`: List<BlockRange>, 
    /**
     * Syncing target. The latest height seen in the network that was successfully verified.
     */
    var `subjectiveHead`: kotlin.ULong
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeSyncingInfo: FfiConverterRustBuffer<SyncingInfo> {
    override fun read(buf: ByteBuffer): SyncingInfo {
        return SyncingInfo(
            FfiConverterSequenceTypeBlockRange.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: SyncingInfo) = (
            FfiConverterSequenceTypeBlockRange.allocationSize(value.`storedHeaders`) +
            FfiConverterULong.allocationSize(value.`subjectiveHead`)
    )

    override fun write(value: SyncingInfo, buf: ByteBuffer) {
            FfiConverterSequenceTypeBlockRange.write(value.`storedHeaders`, buf)
            FfiConverterULong.write(value.`subjectiveHead`, buf)
    }
}





/**
 * Represents all possible errors that can occur in the LuminaNode.
 */
sealed class LuminaException: kotlin.Exception() {
    
    /**
     * Error returned when trying to perform operations on a node that isn't running
     */
    class NodeNotRunning(
        ) : LuminaException() {
        override val message
            get() = ""
    }
    
    /**
     * Error returned when network operations fail
     */
    class Network(
        
        /**
         * Description of the network error
         */
        val `msg`: kotlin.String
        ) : LuminaException() {
        override val message
            get() = "msg=${ `msg` }"
    }
    
    /**
     * Error returned when storage operations fail
     */
    class Storage(
        
        /**
         * Description of the storage error
         */
        val `msg`: kotlin.String
        ) : LuminaException() {
        override val message
            get() = "msg=${ `msg` }"
    }
    
    /**
     * Error returned when trying to start a node that's already running
     */
    class AlreadyRunning(
        ) : LuminaException() {
        override val message
            get() = ""
    }
    
    /**
     * Error returned when a hash string is invalid or malformed
     */
    class InvalidHash(
        
        /**
         * Description of why the hash is invalid
         */
        val `msg`: kotlin.String
        ) : LuminaException() {
        override val message
            get() = "msg=${ `msg` }"
    }
    
    /**
     * Error returned when a header is invalid or malformed
     */
    class InvalidHeader(
        
        /**
         * Description of why the header is invalid
         */
        val `msg`: kotlin.String
        ) : LuminaException() {
        override val message
            get() = "msg=${ `msg` }"
    }
    
    /**
     * Error returned when storage initialization fails
     */
    class StorageInit(
        
        /**
         * Description of why storage initialization failed
         */
        val `msg`: kotlin.String
        ) : LuminaException() {
        override val message
            get() = "msg=${ `msg` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<LuminaException> {
        override fun lift(error_buf: RustBuffer.ByValue): LuminaException = FfiConverterTypeLuminaError.lift(error_buf)
    }

    
}

/**
 * @suppress
 */
public object FfiConverterTypeLuminaError : FfiConverterRustBuffer<LuminaException> {
    override fun read(buf: ByteBuffer): LuminaException {
        

        return when(buf.getInt()) {
            1 -> LuminaException.NodeNotRunning()
            2 -> LuminaException.Network(
                FfiConverterString.read(buf),
                )
            3 -> LuminaException.Storage(
                FfiConverterString.read(buf),
                )
            4 -> LuminaException.AlreadyRunning()
            5 -> LuminaException.InvalidHash(
                FfiConverterString.read(buf),
                )
            6 -> LuminaException.InvalidHeader(
                FfiConverterString.read(buf),
                )
            7 -> LuminaException.StorageInit(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: LuminaException): ULong {
        return when(value) {
            is LuminaException.NodeNotRunning -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is LuminaException.Network -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`msg`)
            )
            is LuminaException.Storage -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`msg`)
            )
            is LuminaException.AlreadyRunning -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is LuminaException.InvalidHash -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`msg`)
            )
            is LuminaException.InvalidHeader -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`msg`)
            )
            is LuminaException.StorageInit -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`msg`)
            )
        }
    }

    override fun write(value: LuminaException, buf: ByteBuffer) {
        when(value) {
            is LuminaException.NodeNotRunning -> {
                buf.putInt(1)
                Unit
            }
            is LuminaException.Network -> {
                buf.putInt(2)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
            is LuminaException.Storage -> {
                buf.putInt(3)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
            is LuminaException.AlreadyRunning -> {
                buf.putInt(4)
                Unit
            }
            is LuminaException.InvalidHash -> {
                buf.putInt(5)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
            is LuminaException.InvalidHeader -> {
                buf.putInt(6)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
            is LuminaException.StorageInit -> {
                buf.putInt(7)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}



/**
 * Events emitted by the node.
 */
sealed class NodeEvent {
    
    /**
     * Node is connecting to bootnodes
     */
    object ConnectingToBootnodes : NodeEvent()
    
    
    /**
     * Peer just connected
     */
    data class PeerConnected(
        /**
         * The ID of the peer.
         */
        val `id`: PeerId, 
        /**
         * Whether peer was in the trusted list or not.
         */
        val `trusted`: kotlin.Boolean) : NodeEvent() {
        companion object
    }
    
    data class PeerDisconnected(
        /**
         * The ID of the peer.
         */
        val `id`: PeerId, 
        /**
         * Whether peer was in the trusted list or not.
         */
        val `trusted`: kotlin.Boolean) : NodeEvent() {
        companion object
    }
    
    /**
     * Sampling just started.
     */
    data class SamplingStarted(
        /**
         * The block height that will be sampled.
         */
        val `height`: kotlin.ULong, 
        /**
         * The square width of the block.
         */
        val `squareWidth`: kotlin.UShort, 
        /**
         * The coordinates of the shares that will be sampled.
         */
        val `shares`: List<ShareCoordinate>) : NodeEvent() {
        companion object
    }
    
    /**
     * A share was sampled.
     */
    data class ShareSamplingResult(
        /**
         * The block height of the share.
         */
        val `height`: kotlin.ULong, 
        /**
         * The square width of the block.
         */
        val `squareWidth`: kotlin.UShort, 
        /**
         * The row of the share.
         */
        val `row`: kotlin.UShort, 
        /**
         * The column of the share.
         */
        val `column`: kotlin.UShort, 
        /**
         * The result of the sampling of the share.
         */
        val `accepted`: kotlin.Boolean) : NodeEvent() {
        companion object
    }
    
    /**
     * Sampling just finished.
     */
    data class SamplingFinished(
        /**
         * The block height that was sampled.
         */
        val `height`: kotlin.ULong, 
        /**
         * The overall result of the sampling.
         */
        val `accepted`: kotlin.Boolean, 
        /**
         * How much time sampling took in milliseconds.
         */
        val `tookMs`: kotlin.ULong) : NodeEvent() {
        companion object
    }
    
    /**
     * Data sampling fatal error.
     */
    data class FatalDaserError(
        /**
         * A human readable error.
         */
        val `error`: kotlin.String) : NodeEvent() {
        companion object
    }
    
    /**
     * A new header was added from HeaderSub.
     */
    data class AddedHeaderFromHeaderSub(
        /**
         * The height of the header.
         */
        val `height`: kotlin.ULong) : NodeEvent() {
        companion object
    }
    
    /**
     * Fetching header of network head just started.
     */
    object FetchingHeadHeaderStarted : NodeEvent()
    
    
    /**
     * Fetching header of network head just finished.
     */
    data class FetchingHeadHeaderFinished(
        /**
         * The height of the network head.
         */
        val `height`: kotlin.ULong, 
        /**
         * How much time fetching took in milliseconds.
         */
        val `tookMs`: kotlin.ULong) : NodeEvent() {
        companion object
    }
    
    /**
     * Fetching headers of a specific block range just started.
     */
    data class FetchingHeadersStarted(
        /**
         * Start of the range.
         */
        val `fromHeight`: kotlin.ULong, 
        /**
         * End of the range (included).
         */
        val `toHeight`: kotlin.ULong) : NodeEvent() {
        companion object
    }
    
    /**
     * Fetching headers of a specific block range just finished.
     */
    data class FetchingHeadersFinished(
        /**
         * Start of the range.
         */
        val `fromHeight`: kotlin.ULong, 
        /**
         * End of the range (included).
         */
        val `toHeight`: kotlin.ULong, 
        /**
         * How much time fetching took in milliseconds.
         */
        val `tookMs`: kotlin.ULong) : NodeEvent() {
        companion object
    }
    
    /**
     * Fetching headers of a specific block range just failed.
     */
    data class FetchingHeadersFailed(
        /**
         * Start of the range.
         */
        val `fromHeight`: kotlin.ULong, 
        /**
         * End of the range (included).
         */
        val `toHeight`: kotlin.ULong, 
        /**
         * A human readable error.
         */
        val `error`: kotlin.String, 
        /**
         * How much time fetching took in milliseconds.
         */
        val `tookMs`: kotlin.ULong) : NodeEvent() {
        companion object
    }
    
    /**
     * Header syncing fatal error.
     */
    data class FatalSyncerError(
        /**
         * A human readable error.
         */
        val `error`: kotlin.String) : NodeEvent() {
        companion object
    }
    
    /**
     * Pruned headers up to and including specified height.
     */
    data class PrunedHeaders(
        /**
         * Last header height that was pruned
         */
        val `toHeight`: kotlin.ULong) : NodeEvent() {
        companion object
    }
    
    /**
     * Pruning fatal error.
     */
    data class FatalPrunerError(
        /**
         * A human readable error.
         */
        val `error`: kotlin.String) : NodeEvent() {
        companion object
    }
    
    /**
     * Network was compromised.
     *
     * This happens when a valid bad encoding fraud proof is received.
     * Ideally it would never happen, but protection needs to exist.
     * In case of compromised network, syncing and data sampling will
     * stop immediately.
     */
    object NetworkCompromised : NodeEvent()
    
    
    /**
     * Node stopped.
     */
    object NodeStopped : NodeEvent()
    
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeNodeEvent : FfiConverterRustBuffer<NodeEvent>{
    override fun read(buf: ByteBuffer): NodeEvent {
        return when(buf.getInt()) {
            1 -> NodeEvent.ConnectingToBootnodes
            2 -> NodeEvent.PeerConnected(
                FfiConverterTypePeerId.read(buf),
                FfiConverterBoolean.read(buf),
                )
            3 -> NodeEvent.PeerDisconnected(
                FfiConverterTypePeerId.read(buf),
                FfiConverterBoolean.read(buf),
                )
            4 -> NodeEvent.SamplingStarted(
                FfiConverterULong.read(buf),
                FfiConverterUShort.read(buf),
                FfiConverterSequenceTypeShareCoordinate.read(buf),
                )
            5 -> NodeEvent.ShareSamplingResult(
                FfiConverterULong.read(buf),
                FfiConverterUShort.read(buf),
                FfiConverterUShort.read(buf),
                FfiConverterUShort.read(buf),
                FfiConverterBoolean.read(buf),
                )
            6 -> NodeEvent.SamplingFinished(
                FfiConverterULong.read(buf),
                FfiConverterBoolean.read(buf),
                FfiConverterULong.read(buf),
                )
            7 -> NodeEvent.FatalDaserError(
                FfiConverterString.read(buf),
                )
            8 -> NodeEvent.AddedHeaderFromHeaderSub(
                FfiConverterULong.read(buf),
                )
            9 -> NodeEvent.FetchingHeadHeaderStarted
            10 -> NodeEvent.FetchingHeadHeaderFinished(
                FfiConverterULong.read(buf),
                FfiConverterULong.read(buf),
                )
            11 -> NodeEvent.FetchingHeadersStarted(
                FfiConverterULong.read(buf),
                FfiConverterULong.read(buf),
                )
            12 -> NodeEvent.FetchingHeadersFinished(
                FfiConverterULong.read(buf),
                FfiConverterULong.read(buf),
                FfiConverterULong.read(buf),
                )
            13 -> NodeEvent.FetchingHeadersFailed(
                FfiConverterULong.read(buf),
                FfiConverterULong.read(buf),
                FfiConverterString.read(buf),
                FfiConverterULong.read(buf),
                )
            14 -> NodeEvent.FatalSyncerError(
                FfiConverterString.read(buf),
                )
            15 -> NodeEvent.PrunedHeaders(
                FfiConverterULong.read(buf),
                )
            16 -> NodeEvent.FatalPrunerError(
                FfiConverterString.read(buf),
                )
            17 -> NodeEvent.NetworkCompromised
            18 -> NodeEvent.NodeStopped
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: NodeEvent) = when(value) {
        is NodeEvent.ConnectingToBootnodes -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
        is NodeEvent.PeerConnected -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypePeerId.allocationSize(value.`id`)
                + FfiConverterBoolean.allocationSize(value.`trusted`)
            )
        }
        is NodeEvent.PeerDisconnected -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypePeerId.allocationSize(value.`id`)
                + FfiConverterBoolean.allocationSize(value.`trusted`)
            )
        }
        is NodeEvent.SamplingStarted -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterULong.allocationSize(value.`height`)
                + FfiConverterUShort.allocationSize(value.`squareWidth`)
                + FfiConverterSequenceTypeShareCoordinate.allocationSize(value.`shares`)
            )
        }
        is NodeEvent.ShareSamplingResult -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterULong.allocationSize(value.`height`)
                + FfiConverterUShort.allocationSize(value.`squareWidth`)
                + FfiConverterUShort.allocationSize(value.`row`)
                + FfiConverterUShort.allocationSize(value.`column`)
                + FfiConverterBoolean.allocationSize(value.`accepted`)
            )
        }
        is NodeEvent.SamplingFinished -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterULong.allocationSize(value.`height`)
                + FfiConverterBoolean.allocationSize(value.`accepted`)
                + FfiConverterULong.allocationSize(value.`tookMs`)
            )
        }
        is NodeEvent.FatalDaserError -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`error`)
            )
        }
        is NodeEvent.AddedHeaderFromHeaderSub -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterULong.allocationSize(value.`height`)
            )
        }
        is NodeEvent.FetchingHeadHeaderStarted -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
        is NodeEvent.FetchingHeadHeaderFinished -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterULong.allocationSize(value.`height`)
                + FfiConverterULong.allocationSize(value.`tookMs`)
            )
        }
        is NodeEvent.FetchingHeadersStarted -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterULong.allocationSize(value.`fromHeight`)
                + FfiConverterULong.allocationSize(value.`toHeight`)
            )
        }
        is NodeEvent.FetchingHeadersFinished -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterULong.allocationSize(value.`fromHeight`)
                + FfiConverterULong.allocationSize(value.`toHeight`)
                + FfiConverterULong.allocationSize(value.`tookMs`)
            )
        }
        is NodeEvent.FetchingHeadersFailed -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterULong.allocationSize(value.`fromHeight`)
                + FfiConverterULong.allocationSize(value.`toHeight`)
                + FfiConverterString.allocationSize(value.`error`)
                + FfiConverterULong.allocationSize(value.`tookMs`)
            )
        }
        is NodeEvent.FatalSyncerError -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`error`)
            )
        }
        is NodeEvent.PrunedHeaders -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterULong.allocationSize(value.`toHeight`)
            )
        }
        is NodeEvent.FatalPrunerError -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`error`)
            )
        }
        is NodeEvent.NetworkCompromised -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
        is NodeEvent.NodeStopped -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
    }

    override fun write(value: NodeEvent, buf: ByteBuffer) {
        when(value) {
            is NodeEvent.ConnectingToBootnodes -> {
                buf.putInt(1)
                Unit
            }
            is NodeEvent.PeerConnected -> {
                buf.putInt(2)
                FfiConverterTypePeerId.write(value.`id`, buf)
                FfiConverterBoolean.write(value.`trusted`, buf)
                Unit
            }
            is NodeEvent.PeerDisconnected -> {
                buf.putInt(3)
                FfiConverterTypePeerId.write(value.`id`, buf)
                FfiConverterBoolean.write(value.`trusted`, buf)
                Unit
            }
            is NodeEvent.SamplingStarted -> {
                buf.putInt(4)
                FfiConverterULong.write(value.`height`, buf)
                FfiConverterUShort.write(value.`squareWidth`, buf)
                FfiConverterSequenceTypeShareCoordinate.write(value.`shares`, buf)
                Unit
            }
            is NodeEvent.ShareSamplingResult -> {
                buf.putInt(5)
                FfiConverterULong.write(value.`height`, buf)
                FfiConverterUShort.write(value.`squareWidth`, buf)
                FfiConverterUShort.write(value.`row`, buf)
                FfiConverterUShort.write(value.`column`, buf)
                FfiConverterBoolean.write(value.`accepted`, buf)
                Unit
            }
            is NodeEvent.SamplingFinished -> {
                buf.putInt(6)
                FfiConverterULong.write(value.`height`, buf)
                FfiConverterBoolean.write(value.`accepted`, buf)
                FfiConverterULong.write(value.`tookMs`, buf)
                Unit
            }
            is NodeEvent.FatalDaserError -> {
                buf.putInt(7)
                FfiConverterString.write(value.`error`, buf)
                Unit
            }
            is NodeEvent.AddedHeaderFromHeaderSub -> {
                buf.putInt(8)
                FfiConverterULong.write(value.`height`, buf)
                Unit
            }
            is NodeEvent.FetchingHeadHeaderStarted -> {
                buf.putInt(9)
                Unit
            }
            is NodeEvent.FetchingHeadHeaderFinished -> {
                buf.putInt(10)
                FfiConverterULong.write(value.`height`, buf)
                FfiConverterULong.write(value.`tookMs`, buf)
                Unit
            }
            is NodeEvent.FetchingHeadersStarted -> {
                buf.putInt(11)
                FfiConverterULong.write(value.`fromHeight`, buf)
                FfiConverterULong.write(value.`toHeight`, buf)
                Unit
            }
            is NodeEvent.FetchingHeadersFinished -> {
                buf.putInt(12)
                FfiConverterULong.write(value.`fromHeight`, buf)
                FfiConverterULong.write(value.`toHeight`, buf)
                FfiConverterULong.write(value.`tookMs`, buf)
                Unit
            }
            is NodeEvent.FetchingHeadersFailed -> {
                buf.putInt(13)
                FfiConverterULong.write(value.`fromHeight`, buf)
                FfiConverterULong.write(value.`toHeight`, buf)
                FfiConverterString.write(value.`error`, buf)
                FfiConverterULong.write(value.`tookMs`, buf)
                Unit
            }
            is NodeEvent.FatalSyncerError -> {
                buf.putInt(14)
                FfiConverterString.write(value.`error`, buf)
                Unit
            }
            is NodeEvent.PrunedHeaders -> {
                buf.putInt(15)
                FfiConverterULong.write(value.`toHeight`, buf)
                Unit
            }
            is NodeEvent.FatalPrunerError -> {
                buf.putInt(16)
                FfiConverterString.write(value.`error`, buf)
                Unit
            }
            is NodeEvent.NetworkCompromised -> {
                buf.putInt(17)
                Unit
            }
            is NodeEvent.NodeStopped -> {
                buf.putInt(18)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






/**
 * @suppress
 */
public object FfiConverterOptionalUInt: FfiConverterRustBuffer<kotlin.UInt?> {
    override fun read(buf: ByteBuffer): kotlin.UInt? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterUInt.read(buf)
    }

    override fun allocationSize(value: kotlin.UInt?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterUInt.allocationSize(value)
        }
    }

    override fun write(value: kotlin.UInt?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterUInt.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalULong: FfiConverterRustBuffer<kotlin.ULong?> {
    override fun read(buf: ByteBuffer): kotlin.ULong? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterULong.read(buf)
    }

    override fun allocationSize(value: kotlin.ULong?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterULong.allocationSize(value)
        }
    }

    override fun write(value: kotlin.ULong?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterULong.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalString: FfiConverterRustBuffer<kotlin.String?> {
    override fun read(buf: ByteBuffer): kotlin.String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: kotlin.String?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: kotlin.String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalByteArray: FfiConverterRustBuffer<kotlin.ByteArray?> {
    override fun read(buf: ByteBuffer): kotlin.ByteArray? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterByteArray.read(buf)
    }

    override fun allocationSize(value: kotlin.ByteArray?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterByteArray.allocationSize(value)
        }
    }

    override fun write(value: kotlin.ByteArray?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterByteArray.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalSequenceString: FfiConverterRustBuffer<List<kotlin.String>?> {
    override fun read(buf: ByteBuffer): List<kotlin.String>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceString.read(buf)
    }

    override fun allocationSize(value: List<kotlin.String>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterSequenceString.allocationSize(value)
        }
    }

    override fun write(value: List<kotlin.String>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceString.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceString: FfiConverterRustBuffer<List<kotlin.String>> {
    override fun read(buf: ByteBuffer): List<kotlin.String> {
        val len = buf.getInt()
        return List<kotlin.String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<kotlin.String>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<kotlin.String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterString.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeBlockRange: FfiConverterRustBuffer<List<BlockRange>> {
    override fun read(buf: ByteBuffer): List<BlockRange> {
        val len = buf.getInt()
        return List<BlockRange>(len) {
            FfiConverterTypeBlockRange.read(buf)
        }
    }

    override fun allocationSize(value: List<BlockRange>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeBlockRange.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<BlockRange>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeBlockRange.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypePeerId: FfiConverterRustBuffer<List<PeerId>> {
    override fun read(buf: ByteBuffer): List<PeerId> {
        val len = buf.getInt()
        return List<PeerId>(len) {
            FfiConverterTypePeerId.read(buf)
        }
    }

    override fun allocationSize(value: List<PeerId>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypePeerId.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<PeerId>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypePeerId.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeShareCoordinate: FfiConverterRustBuffer<List<ShareCoordinate>> {
    override fun read(buf: ByteBuffer): List<ShareCoordinate> {
        val len = buf.getInt()
        return List<ShareCoordinate>(len) {
            FfiConverterTypeShareCoordinate.read(buf)
        }
    }

    override fun allocationSize(value: List<ShareCoordinate>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeShareCoordinate.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<ShareCoordinate>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeShareCoordinate.write(it, buf)
        }
    }
}

















